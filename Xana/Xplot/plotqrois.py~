import numpy as np
from matplotlib import pyplot as plt
from matplotlib.collections import PatchCollection
from matplotlib.patches import Rectangle
from matplotlib.colors import LogNorm
from Xplot.niceplot import niceplot
from SaxsAna.integrate import get_soq

def shadeqrois(ax, qv, dqv, alpha=0.6, cmap='inferno'):
    yl = ax.get_ylim()
    boxes = []
    
    # Loop over data points; create box from errors at each point
    cmap = plt.get_cmap(cmap)
    clrs = cmap(np.linspace(.1,.9,qv.size))
    for qi,ci,dqi in zip(qv,clrs,dqv):
        rect = Rectangle((qi-dqi/2, yl[0]), dqi, yl[1]-yl[0])
        boxes.append(rect)

    # Create patch collection with specified colour/alpha
    pc = PatchCollection(boxes, facecolors=clrs, alpha=alpha,
                         edgecolor='k')

    # Add collection to axes
    ax.add_collection(pc)


def plotqrois(Isaxs, mask, setup, method='S(Q)', d=0, shade=False, color='r', ax=None, label='',
              invert_roi_mask=False):
    dim = Isaxs.shape

    if 'qsec' in setup and d==0:
        y1, x1 = setup['qsec'][0]
        y2, x2 = setup['qsec'][1]
    else:
        x1,x2 = ( max( setup['ctr'][0]-d, 0 ), min( setup['ctr'][0]+d, dim[1] ) )
        y1,y2 = ( max( setup['ctr'][1]-d, 0 ), min( setup['ctr'][1]+d, dim[0] ) )

    if ax is None:
        fig, ax = plt.subplots(1,1, figsize=(6,5))

    if method == 'S(Q)' or method == 1:
        q, I, e  = get_soq(Isaxs, mask, setup)
        ax.loglog(q, I, '.-', color=color, label=label)
        ax.set_xlabel(r'q [$\mathrm{nm}^{-1}$]')
        ax.set_ylabel(r'S(Q)')
        niceplot(ax)
        if shade:
            shadeqrois(ax, setup['qv'], setup['dqv'])
        plt.tight_layout()
    elif method == 'ROIS' or method == 2:
        roi_mask = setup['roi_mask']
        if invert_roi_mask:
            roi_mask = ~roi_mask
        im = ax.imshow((Isaxs*mask*roi_mask)[y1:y2,x1:x2],
                      cmap=plt.get_cmap('jet'), norm=LogNorm())
        
        cl = plt.colorbar(im, ax=ax)
        ax.xaxis.set_visible(0)
        ax.yaxis.set_visible(0)

        niceplot(ax)
        plt.grid()
        plt.tight_layout()
    plt.show()
